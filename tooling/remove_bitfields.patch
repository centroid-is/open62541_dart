--- open62541.h	2025-02-19 18:41:05.953099547 +0000
+++ open62541.h	2025-02-19 18:45:07.725106926 +0000
@@ -23374,12 +23374,13 @@
     UA_UInt16     sourcePicoseconds;
     UA_UInt16     serverPicoseconds;
     UA_StatusCode status;
-    UA_Boolean    hasValue             : 1;
-    UA_Boolean    hasStatus            : 1;
-    UA_Boolean    hasSourceTimestamp   : 1;
-    UA_Boolean    hasServerTimestamp   : 1;
-    UA_Boolean    hasSourcePicoseconds : 1;
-    UA_Boolean    hasServerPicoseconds : 1;
+    UA_Byte substitute;
+    // UA_Boolean    hasValue             : 1;
+    // UA_Boolean    hasStatus            : 1;
+    // UA_Boolean    hasSourceTimestamp   : 1;
+    // UA_Boolean    hasServerTimestamp   : 1;
+    // UA_Boolean    hasSourcePicoseconds : 1;
+    // UA_Boolean    hasServerPicoseconds : 1;
 } UA_DataValue;
 
 /* Copy the DataValue, but use only a subset of the (multidimensional) array of
@@ -23400,13 +23401,14 @@
  * A structure that contains detailed error and diagnostic information
  * associated with a StatusCode. */
 typedef struct UA_DiagnosticInfo {
-    UA_Boolean    hasSymbolicId          : 1;
-    UA_Boolean    hasNamespaceUri        : 1;
-    UA_Boolean    hasLocalizedText       : 1;
-    UA_Boolean    hasLocale              : 1;
-    UA_Boolean    hasAdditionalInfo      : 1;
-    UA_Boolean    hasInnerStatusCode     : 1;
-    UA_Boolean    hasInnerDiagnosticInfo : 1;
+    // UA_Boolean    hasSymbolicId          : 1;
+    // UA_Boolean    hasNamespaceUri        : 1;
+    // UA_Boolean    hasLocalizedText       : 1;
+    // UA_Boolean    hasLocale              : 1;
+    // UA_Boolean    hasAdditionalInfo      : 1;
+    // UA_Boolean    hasInnerStatusCode     : 1;
+    // UA_Boolean    hasInnerDiagnosticInfo : 1;
+    UA_Byte       substitute;
     UA_Int32      symbolicId;
     UA_Int32      namespaceUri;
     UA_Int32      localizedText;
@@ -23450,16 +23452,17 @@
     const char *memberName;       /* Human-readable member name */
 #endif
     const UA_DataType *memberType;/* The member data type description */
-    UA_Byte padding    : 6;       /* How much padding is there before this
-                                     member element? For arrays this is the
-                                     padding before the size_t length member.
-                                     (No padding between size_t and the
-                                     following ptr.) For unions, the padding
-                                     includes the size of the switchfield (the
-                                     offset from the start of the union
-                                     type). */
-    UA_Byte isArray    : 1;       /* The member is an array */
-    UA_Byte isOptional : 1;       /* The member is an optional field */
+    // UA_Byte padding    : 6;       /* How much padding is there before this
+    //                                  member element? For arrays this is the
+    //                                  padding before the size_t length member.
+    //                                  (No padding between size_t and the
+    //                                  following ptr.) For unions, the padding
+    //                                  includes the size of the switchfield (the
+    //                                  offset from the start of the union
+    //                                  type). */
+    // UA_Byte isArray    : 1;       /* The member is an array */
+    // UA_Byte isOptional : 1;       /* The member is an optional field */
+    UA_Byte substitute;
 } UA_DataTypeMember;
 
 /* The DataType "kind" is an internal type classification. It is used to
@@ -23506,13 +23509,14 @@
     UA_NodeId typeId;           /* The nodeid of the type */
     UA_NodeId binaryEncodingId; /* NodeId of datatype when encoded as binary */
     //UA_NodeId xmlEncodingId;  /* NodeId of datatype when encoded as XML */
-    UA_UInt32 memSize     : 16; /* Size of the struct in memory */
-    UA_UInt32 typeKind    : 6;  /* Dispatch index for the handling routines */
-    UA_UInt32 pointerFree : 1;  /* The type (and its members) contains no
-                                 * pointers that need to be freed */
-    UA_UInt32 overlayable : 1;  /* The type has the identical memory layout
-                                 * in memory and on the binary stream. */
-    UA_UInt32 membersSize : 8;  /* How many members does the type have? */
+    // UA_UInt32 memSize     : 16; /* Size of the struct in memory */
+    // UA_UInt32 typeKind    : 6;  /* Dispatch index for the handling routines */
+    // UA_UInt32 pointerFree : 1;  /* The type (and its members) contains no
+    //                              * pointers that need to be freed */
+    // UA_UInt32 overlayable : 1;  /* The type has the identical memory layout
+    //                              * in memory and on the binary stream. */
+    // UA_UInt32 membersSize : 8;  /* How many members does the type have? */
+    UA_UInt32 substitute;
     UA_DataTypeMember *members;
 };
 
